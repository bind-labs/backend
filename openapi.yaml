openapi: 3.1.0
info:
  title: Bind Feed Aggregator API
  description: |-
    ## Authentication

    This API uses JWT Bearer tokens for authentication. To authenticate, include an `Authorization: Bearer <token>` header in your requests. Tokens can be obtained from the login or OAuth endpoints and are valid for 7 days.

    Protected endpoints will return 401 Unauthorized if a valid token is not provided.
  contact:
    name: Bind Team
    email: support@bind.sh
  license:
    name: ''
  version: '1.0'
paths:
  /feed:
    get:
      tags:
      - feed
      summary: List all available feeds
      description: |-
        Retrieves a list of all RSS/Atom feeds available in the system. This endpoint requires
        authentication and returns feeds that the system is aggregating. Users can subscribe to
        these feeds by adding them to their personal indexes.

        Each feed contains metadata such as the title, description, URL, and update frequency.
        The actual feed content is accessed through the index endpoints.
      operationId: list_feeds
      responses:
        '200':
          description: List of all feeds
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Feed'
        '401':
          description: Unauthorized - Valid JWT token required
        '500':
          description: Internal server error
      security:
      - Authorization Token: []
    put:
      tags:
      - feed
      summary: Create a new feed subscription
      description: |-
        Add a new RSS/Atom feed to the system by providing its URL. The system will:
        1. Validate the URL format
        2. Fetch the feed content
        3. Parse the feed metadata (title, description, etc.)
        4. Store the feed in the database
        5. Begin regular updates of the feed content

        The feed will be available for all users to add to their indexes.
        If the feed already exists in the system, the existing feed will be returned.

        The feed daemon handles automatic updates based on the feed's update frequency
        or the presence of standard headers like Last-Modified and ETag.
      operationId: create_feed
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFeedRequest'
        required: true
      responses:
        '201':
          description: Feed created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feed'
              example:
                description: A blog about technology and programming
                id: 123
                link: https://example.com/feed.xml
                title: Example Tech Blog
                updated_at: 2023-01-01T12:00:00Z
                url: https://example.com
        '400':
          description: Invalid request - URL format is invalid or feed could not be fetched
        '401':
          description: Unauthorized - Valid JWT token required
        '500':
          description: Internal server error - Feed parsing failed
      security:
      - Authorization Token: []
  /feed/discover:
    post:
      tags:
      - feed
      summary: Discover feeds from a website URL
      operationId: discover_feeds
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiscoverFeedsRequest'
        required: true
      responses:
        '200':
          description: Feeds discovered successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FeedInformation'
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
      security:
      - jwt: []
  /feed/{id}:
    get:
      tags:
      - feed
      summary: Get a feed by ID
      operationId: get_feed
      parameters:
      - name: id
        in: path
        description: Feed ID
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: Feed found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feed'
        '401':
          description: Unauthorized
        '404':
          description: Feed not found
        '500':
          description: Internal server error
      security:
      - jwt: []
  /index:
    get:
      tags:
      - index
      summary: List all indexes
      operationId: list_indexes
      parameters:
      - name: page
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: limit
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: List of all indexes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserIndex'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
      security:
      - Authorization Token: []
    put:
      tags:
      - index
      summary: Create a new index
      operationId: create_index
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateIndexRequest'
        required: true
      responses:
        '200':
          description: Index created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserIndex'
        '400':
          description: Invalid index parameters
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
      security:
      - Authorization Token: []
  /index/{id}:
    get:
      tags:
      - index
      summary: Get an index by ID
      operationId: get_index
      parameters:
      - name: id
        in: path
        description: Index ID
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: Index details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserIndex'
        '401':
          description: Unauthorized
        '403':
          description: Not the owner of the index
        '404':
          description: Index not found
        '500':
          description: Internal server error
      security:
      - Authorization Token: []
    delete:
      tags:
      - index
      summary: Delete an index
      operationId: delete_index
      parameters:
      - name: id
        in: path
        description: Index ID
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '204':
          description: Index deleted successfully
        '401':
          description: Unauthorized
        '403':
          description: Not the owner of the index
        '404':
          description: Index not found
        '500':
          description: Internal server error
      security:
      - Authorization Token: []
    patch:
      tags:
      - index
      summary: Update an index
      operationId: update_index
      parameters:
      - name: id
        in: path
        description: Index ID
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateIndexRequest'
        required: true
      responses:
        '200':
          description: Index updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserIndex'
        '400':
          description: Invalid index parameters
        '401':
          description: Unauthorized
        '403':
          description: Not the owner of the index
        '404':
          description: Index not found
        '500':
          description: Internal server error
      security:
      - Authorization Token: []
  /item/{id}:
    get:
      tags:
      - items
      summary: Get a feed item by ID
      operationId: get_item
      parameters:
      - name: id
        in: path
        description: Item ID
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: Feed item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedItem'
        '401':
          description: Unauthorized
        '404':
          description: Item not found
        '500':
          description: Internal server error
      security:
      - Authorization Token: []
  /item/{id}/parsed:
    get:
      tags:
      - items
      summary: Get parsed content of a feed item
      operationId: get_parsed
      parameters:
      - name: id
        in: path
        description: Item ID
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: Parsed feed item content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedItemParsed'
        '401':
          description: Unauthorized
        '404':
          description: Item not found
        '500':
          description: Internal server error
      security:
      - Authorization Token: []
  /list:
    get:
      tags:
      - lists
      summary: List all user lists
      operationId: list_lists
      responses:
        '200':
          description: List of all user lists
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserList'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
      security:
      - Authorization Token: []
    put:
      tags:
      - lists
      summary: Create a new list
      operationId: create_list
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateListRequest'
        required: true
      responses:
        '200':
          description: List created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
        '400':
          description: Invalid list parameters
        '401':
          description: Unauthorized
        '403':
          description: Reached max list count of 500
        '500':
          description: Internal server error
      security:
      - Authorization Token: []
  /list/index/{id}:
    delete:
      tags:
      - lists
      summary: Delete a list
      operationId: delete_list
      parameters:
      - name: id
        in: path
        description: List ID
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '204':
          description: List deleted successfully
        '401':
          description: Unauthorized
        '403':
          description: Not the owner of the list
        '404':
          description: List not found
        '500':
          description: Internal server error
      security:
      - Authorization Token: []
    patch:
      tags:
      - lists
      summary: Update a list
      operationId: update_list
      parameters:
      - name: id
        in: path
        description: List ID
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateListRequest'
        required: true
      responses:
        '200':
          description: List updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
        '400':
          description: Invalid list parameters
        '401':
          description: Unauthorized
        '403':
          description: Not the owner of the list
        '404':
          description: List not found
        '500':
          description: Internal server error
      security:
      - Authorization Token: []
  /list/{id}:
    get:
      tags:
      - lists
      summary: Get a list by ID
      operationId: get_list
      parameters:
      - name: id
        in: path
        description: List ID
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: List details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
        '401':
          description: Unauthorized
        '403':
          description: Not the owner of the list
        '404':
          description: List not found
        '500':
          description: Internal server error
      security:
      - Authorization Token: []
  /list/{list_id}/{list_id}/item:
    get:
      tags:
      - lists
      summary: Get all items from a list
      operationId: get_list_items
      parameters:
      - name: list_id
        in: path
        description: List ID
        required: true
        schema:
          type: integer
          format: int32
      - name: page
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: limit
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: List of items in the list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserListItem'
        '401':
          description: Unauthorized
        '404':
          description: List not found
        '500':
          description: Internal server error
      security:
      - Authorization Token: []
    post:
      tags:
      - lists
      summary: Add an item to a list
      operationId: create_list_item
      parameters:
      - name: list_id
        in: path
        description: List ID
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateListItemRequest'
        required: true
      responses:
        '200':
          description: Item added to list successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListItem'
        '400':
          description: Invalid list item parameters
        '401':
          description: Unauthorized
        '403':
          description: Not the owner of the list
        '404':
          description: List or item not found
        '500':
          description: Internal server error
      security:
      - Authorization Token: []
  /list/{list_id}/{list_id}/item/{item_id}:
    get:
      tags:
      - lists
      summary: Get a specific item from a list
      operationId: get_list_item
      parameters:
      - name: list_id
        in: path
        description: List ID
        required: true
        schema:
          type: integer
          format: int32
      - name: item_id
        in: path
        description: Item ID
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: List item details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListItem'
        '400':
          description: Item does not belong to the list
        '401':
          description: Unauthorized
        '403':
          description: Not the owner of the list item
        '404':
          description: List item not found
        '500':
          description: Internal server error
      security:
      - Authorization Token: []
    delete:
      tags:
      - lists
      summary: Remove an item from a list
      operationId: delete_list_item
      parameters:
      - name: list_id
        in: path
        description: List ID
        required: true
        schema:
          type: integer
          format: int32
      - name: item_id
        in: path
        description: Item ID
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '204':
          description: Item removed from list successfully
        '400':
          description: Item does not belong to the list
        '401':
          description: Unauthorized
        '403':
          description: Not the owner of the list
        '404':
          description: List or item not found
        '500':
          description: Internal server error
      security:
      - Authorization Token: []
  /search:
    post:
      tags:
      - search
      summary: Search for feed items
      operationId: search
      parameters:
      - name: page
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: limit
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
        required: true
      responses:
        '200':
          description: List of feed items matching the search query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FeedItem'
        '400':
          description: Invalid search query
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
      security:
      - Authorization Token: []
  /tag:
    get:
      tags:
      - tags
      summary: List all tags for the authenticated user
      description: |-
        Retrieves a list of all tags created by the authenticated user.
        Tags are used to organize feeds and indexes. Each tag contains its title and a list of items.
        Results are paginated.
      operationId: list_tags
      parameters:
      - name: page
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: limit
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: List of user tags
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserTag'
        '401':
          description: Unauthorized - Valid JWT token required
        '500':
          description: Internal server error
      security:
      - Authorization Token: []
    put:
      tags:
      - tags
      summary: Create a new tag for the authenticated user
      description: |-
        Creates a new tag with the provided title. Tags can be used to organize feeds and indexes.
        Initially, a new tag has no items. Items can be added using the add item endpoint.
      operationId: create_tag
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTagRequest'
        required: true
      responses:
        '201':
          description: Tag created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTag'
              example:
                children: []
                created_at: 2023-01-01T12:00:00Z
                id: 123
                title: Tech Blogs
                updated_at: 2023-01-01T12:00:00Z
        '400':
          description: Invalid request - Title must be between 1 and 100 characters
        '401':
          description: Unauthorized - Valid JWT token required
        '500':
          description: Internal server error
      security:
      - Authorization Token: []
  /tag/{id}:
    delete:
      tags:
      - tags
      summary: Delete a list
      operationId: delete_tag
      parameters:
      - name: id
        in: path
        description: Delete Tag ID
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '204':
          description: Tag deleted successfully
        '401':
          description: Unauthorized
        '403':
          description: Not the owner of the tag
        '404':
          description: Tag not found
        '500':
          description: Internal server error
      security:
      - Authorization Token: []
    patch:
      tags:
      - tags
      summary: Modify a tag's properties
      operationId: modify_tag
      parameters:
      - name: id
        in: path
        description: Tag ID to modify
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyTagRequest'
        required: true
      responses:
        '200':
          description: Tag modified successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTag'
        '400':
          description: Invalid request - Title must be between 1 and 100 characters
        '401':
          description: Unauthorized - Valid JWT token required
        '403':
          description: Forbidden - User does not own this tag
        '404':
          description: Not found - Tag does not exist
        '500':
          description: Internal server error
      security:
      - Authorization Token: []
  /user/email/login:
    post:
      tags:
      - user:email
      summary: Login with email/username and password
      description: |-
        Authenticates a user using their email/username and password, returning a JWT token
        that can be used for subsequent API requests. The token should be included in the
        Authorization header as a Bearer token.

        The token is valid for 7 days by default. After expiration, the user will need to
        login again to obtain a new token.
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginRequest'
        required: true
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLoginResponse'
              example:
                token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '400':
          description: Bad request - missing email or username
        '401':
          description: Login failed - incorrect credentials
        '500':
          description: Internal server error
  /user/email/register:
    post:
      tags:
      - user:email
      summary: Register a new user with email and password
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterRequest'
        required: true
      responses:
        '200':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegisterResponse'
        '400':
          description: Invalid registration data
        '403':
          description: Invalid email verification code
        '409':
          description: User already exists
        '500':
          description: Internal server error
  /user/email/verify:
    post:
      tags:
      - user:email
      summary: |-
        Sends an email to the user with a verification code
        which must be used during registration
      operationId: verify
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailVerificationRequest'
        required: true
      responses:
        '200':
          description: Verification email sent successfully
        '400':
          description: Invalid email format
        '409':
          description: User with this email already exists
        '500':
          description: Internal server error
  /user/history:
    get:
      tags:
      - user:history
      summary: Get user's reading history
      operationId: get_user_history
      parameters:
      - name: page
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: limit
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: User's reading history
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HistoryItem'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
      security:
      - Authorization Token: []
  /user/history/{id}:
    get:
      tags:
      - user:history
      summary: Get a specific history item
      operationId: get_user_history_item
      parameters:
      - name: id
        in: path
        description: History item ID
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: History item details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HistoryItem'
        '401':
          description: Unauthorized
        '403':
          description: Not the owner of the history item
        '404':
          description: History item not found
        '500':
          description: Internal server error
      security:
      - Authorization Token: []
    delete:
      tags:
      - user:history
      summary: Delete a history item
      operationId: delete_history_item
      parameters:
      - name: id
        in: path
        description: History item ID
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '204':
          description: History item deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: History item not found
        '500':
          description: Internal server error
      security:
      - Authorization Token: []
    patch:
      tags:
      - user:history
      summary: Update a history item
      operationId: update_history_item
      parameters:
      - name: id
        in: path
        description: History item ID
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateHistoryItem'
        required: true
      responses:
        '200':
          description: History item updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HistoryItem'
        '400':
          description: Invalid history item parameters
        '401':
          description: Unauthorized
        '403':
          description: Not the owner of the history item
        '404':
          description: History item not found
        '500':
          description: Internal server error
      security:
      - Authorization Token: []
  /user/oauth/authorize:
    get:
      tags:
      - user:oauth
      summary: Redirect to OAuth provider authorization page
      operationId: authorize
      parameters:
      - name: provider
        in: query
        description: OAuth provider name
        required: true
        schema:
          type: string
      - name: client
        in: query
        description: Client type (web, android, ios)
        required: true
        schema:
          $ref: '#/components/schemas/OAuthRedirectClient'
      responses:
        '307':
          description: Redirect to provider's authorization page
        '400':
          description: Invalid provider
        '500':
          description: Internal server error
  /user/oauth/callback:
    get:
      tags:
      - user:oauth
      summary: Handle OAuth callback from authentication providers
      description: |-
        This endpoint handles the OAuth 2.0 callback from external providers (e.g., Google, GitHub).
        After the user authorizes the application with the provider, they are redirected back to this
        endpoint with an authorization code and state parameter.

        The endpoint:
        1. Validates the state parameter to prevent CSRF attacks
        2. Exchanges the authorization code for an access token
        3. Fetches user information from the provider
        4. Creates or updates the user in the database
        5. Issues a JWT token for the user
        6. Redirects back to the client application with the token

        The client app should extract the token from the URL fragment and use it for future API requests.
      operationId: callback
      parameters:
      - name: code
        in: query
        description: Authorization code from provider
        required: true
        schema:
          type: string
      - name: state
        in: query
        description: CSRF state token to verify the request
        required: true
        schema:
          type: string
      responses:
        '307':
          description: Redirect back to app with token in URL fragment (#token=...)
        '400':
          description: Invalid state (CSRF protection) or authorization code
        '500':
          description: Internal server error during token exchange or user creation
  /user/oauth/providers:
    get:
      tags:
      - user:oauth
      summary: List available OAuth providers
      operationId: list_providers
      responses:
        '200':
          description: List of available OAuth providers
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '500':
          description: Internal server error
components:
  schemas:
    AuthUser:
      type: object
      description: |-
        Authenticated user information extracted from a valid JWT token.

        Add this as a parameter to a handler function to require the user to be logged in.
        Parses a JWT from the `Authorization: Bearer <token>` header.

        This extractor will return 401 Unauthorized if no valid token is provided.
      required:
      - id
      - email
      - username
      properties:
        email:
          type: string
          description: User's email address
        id:
          type: integer
          format: int32
          description: Unique identifier for the user
        username:
          type: string
          description: User's username
    CreateFeedRequest:
      type: object
      description: Request to create a new feed
      required:
      - link
      properties:
        link:
          type: string
          description: URL of the feed to create
    CreateIndexRequest:
      type: object
      required:
      - query
      - sort
      - title
      - icon
      properties:
        description:
          type:
          - string
          - 'null'
        icon:
          $ref: '#/components/schemas/Icon'
        query:
          type: string
        sort:
          $ref: '#/components/schemas/SortOrder'
        title:
          type: string
    CreateListItemRequest:
      type: object
      required:
      - index
      - owner
      - item
      properties:
        index:
          type: integer
          format: int32
        item:
          type: integer
          format: int64
          description: The id of the feed item this item is referencing
        owner:
          type: integer
          format: int32
    CreateListRequest:
      type: object
      required:
      - title
      - icon
      properties:
        description:
          type:
          - string
          - 'null'
        icon:
          $ref: '#/components/schemas/Icon'
        title:
          type: string
    CreateTagRequest:
      type: object
      description: Request to create a new tag
      required:
      - title
      properties:
        title:
          type: string
          description: Title of the tag
    DiscoverFeedsRequest:
      type: object
      description: Request to discover feeds from a website URL
      required:
      - link
      properties:
        link:
          type: string
          description: URL of the website to discover feeds from
    EmailVerificationRequest:
      type: object
      required:
      - email
      properties:
        email:
          type: string
    Feed:
      type: object
      description: |-
        Represents a single feed in the database.
        Note: This feed can be an RSS, Atom or JSON feed.
      required:
      - id
      - status
      - format
      - link
      - title
      - description
      - skip_hours
      - skip_days_of_week
      - created_at
      - updated_at
      - fetched_at
      - successful_fetch_at
      - next_fetch_at
      properties:
        created_at:
          type: string
          format: date-time
          description: When the feed was created in the system
        description:
          type: string
          description: Description of the feed
        domain:
          type:
          - string
          - 'null'
          description: Domain of the feed (extracted from the URL)
        etag:
          type:
          - string
          - 'null'
          description: ETag header from the last update
        fetched_at:
          type: string
          format: date-time
          description: Time of the last fetch
        format:
          $ref: '#/components/schemas/FeedFormat'
          description: Format of the feed (RSS, Atom, JSON)
        icon:
          type:
          - string
          - 'null'
          description: URL to the feed's icon
        id:
          type: integer
          format: int32
          description: Unique identifier of the feed
        language:
          type:
          - string
          - 'null'
          description: Language of the feed (e.g., "en-us")
        link:
          type: string
          description: URL of the feed
        next_fetch_at:
          type: string
          format: date-time
          description: Time to fetch the feed next
        skip_days_of_week:
          type: array
          items:
            type: integer
            format: int32
          description: Days of the week when the feed should not be fetched
        skip_hours:
          type: array
          items:
            type: integer
            format: int32
          description: Hours when the feed should not be fetched
        status:
          $ref: '#/components/schemas/FeedStatus'
          description: Current status of the feed
        successful_fetch_at:
          type: string
          format: date-time
          description: Time of the last successful fetch
        title:
          type: string
          description: Title of the feed
        ttl_in_minutes:
          type:
          - integer
          - 'null'
          format: int32
          description: Minimum time to cache the feed for
        updated_at:
          type: string
          format: date-time
          description: Time of the last update to the content
    FeedFormat:
      type: string
      description: Format of a feed
      enum:
      - Atom
      - Rss
      - Json
    FeedInformation:
      type: object
      description: Information about a discovered feed
      required:
      - url
      - format
      properties:
        format:
          $ref: '#/components/schemas/FeedFormat'
          description: Format of the feed (RSS, Atom, or JSON)
        url:
          type: string
          description: URL of the feed
    FeedItem:
      type: object
      description: Represent a single feed item in the database
      required:
      - id
      - guid
      - feed_id
      - index_in_feed
      - title
      - categories
      - created_at
      - updated_at
      properties:
        base_link:
          type:
          - string
          - 'null'
          description: Base URL for relative links in the content
        categories:
          type: array
          items:
            type: string
          description: Categories or tags for the item
        comments_link:
          type:
          - string
          - 'null'
          description: Link to the comments section
        content:
          type:
          - string
          - 'null'
          description: Full content of the item
        content_type:
          type:
          - string
          - 'null'
          description: MIME type of the content
        created_at:
          type: string
          format: date-time
          description: When the item was created in the system
        description:
          type:
          - string
          - 'null'
          description: Summary or description of the item
        enclosure:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/FeedItemEnclosure'
            description: Attached media file (if any)
        feed_id:
          type: integer
          format: int32
          description: ID of the feed this item belongs to
        guid:
          type: string
          description: Globally unique identifier of the item (from the feed)
        id:
          type: integer
          format: int64
          description: Unique identifier of the feed item
        index_in_feed:
          type: integer
          format: int32
          description: Position of the item in the feed
        link:
          type:
          - string
          - 'null'
          description: Link to the full article
        published_at:
          type:
          - string
          - 'null'
          format: date-time
          description: When the item was published
        title:
          type: string
          description: Title of the feed item
        updated_at:
          type: string
          format: date-time
          description: When the item was last updated
    FeedItemEnclosure:
      type: object
      description: Represents an attached media file in a feed item (e.g. an image or audio file)
      required:
      - url
      - length
      - mime_type
      properties:
        length:
          type: integer
          format: int32
          description: Size of the media file in bytes
        mime_type:
          type: string
          description: MIME type of the media file
        url:
          type: string
          description: URL of the media file
    FeedItemParsed:
      type: object
      required:
      - id
      - feed_item_id
      - content
      - content_type
      - created_at
      - updated_at
      properties:
        content:
          type: string
        content_type:
          type: string
        created_at:
          type: string
          format: date-time
        feed_item_id:
          type: integer
          format: int64
        id:
          type: integer
          format: int64
        updated_at:
          type: string
          format: date-time
    FeedStatus:
      type: string
      description: Status of a feed
      enum:
      - Active
      - Completed
      - Suspended
      - Broken
    HistoryItem:
      type: object
      description: Represents a single item in a user's history
      required:
      - id
      - owner
      - item
      - progress
      - created_at
      - updated_at
      properties:
        created_at:
          type: string
          format: date-time
        id:
          type: integer
          format: int32
        item:
          type: integer
          format: int64
          description: The id of the feed item this item is referencing
        owner:
          type: integer
          format: int32
        progress:
          type: number
          format: double
          description: Progress in the item, 0 - 1
        updated_at:
          type: string
          format: date-time
    Icon:
      type: object
      required:
      - icon
      - color
      properties:
        color:
          type: string
        icon:
          type: string
    ModifyTagRequest:
      type: object
      description: Request to modify a tag
      properties:
        childrenToAdd:
          type:
          - array
          - 'null'
          items:
            $ref: '#/components/schemas/TagChild'
        childrenToRemove:
          type:
          - array
          - 'null'
          items:
            $ref: '#/components/schemas/TagChild'
        title:
          type:
          - string
          - 'null'
          description: New title for the tag
    SearchRequest:
      type: object
      required:
      - query
      - sort
      properties:
        query:
          type: string
        sort:
          $ref: '#/components/schemas/SortOrder'
    SortOrder:
      type: string
      enum:
      - RecentlyUpdated
      - AsIs
    TagChild:
      type: object
      required:
      - type
      - id
      properties:
        id:
          type: integer
          format: int32
        type:
          $ref: '#/components/schemas/TagChildType'
    TagChildType:
      type: string
      enum:
      - Feed
      - Index
    UpdateHistoryItem:
      type: object
      required:
      - progress
      properties:
        progress:
          type: number
          format: double
    UpdateIndexRequest:
      type: object
      properties:
        description:
          type:
          - string
          - 'null'
        icon:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/Icon'
        query:
          type:
          - string
          - 'null'
        sort:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/SortOrder'
        title:
          type:
          - string
          - 'null'
    UpdateListRequest:
      type: object
      properties:
        description:
          type:
          - string
          - 'null'
        icon:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/Icon'
        title:
          type:
          - string
          - 'null'
    UserIndex:
      type: object
      description: |-
        Represents an index created by a user.
        An **Index** can be thought of as a custom search over a certain set of feeds.
      required:
      - id
      - owner
      - query
      - sort
      - title
      - icon
      - created_at
      - updated_at
      properties:
        created_at:
          type: string
          format: date-time
        description:
          type:
          - string
          - 'null'
        icon:
          $ref: '#/components/schemas/Icon'
        id:
          type: integer
          format: int32
        owner:
          type: integer
          format: int32
        query:
          type: string
        sort:
          type: string
        title:
          type: string
        updated_at:
          type: string
          format: date-time
    UserList:
      type: object
      description: |-
        Represent a list created by a user
        Lists are a way for users to catalogue items from feeds
      required:
      - id
      - owner
      - title
      - created_at
      - updated_at
      properties:
        created_at:
          type: string
          format: date-time
        description:
          type:
          - string
          - 'null'
        icon:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/Icon'
        id:
          type: integer
          format: int32
        owner:
          type: integer
          format: int32
        title:
          type: string
        updated_at:
          type: string
          format: date-time
    UserListItem:
      type: object
      description: Represents a single item in a user's list
      required:
      - id
      - index
      - owner
      - list
      - item
      - created_at
      - updated_at
      properties:
        created_at:
          type: string
          format: date-time
        id:
          type: integer
          format: int32
        index:
          type: integer
          format: int32
        item:
          type: integer
          format: int64
          description: The id of the feed item this item is referencing
        list:
          type: integer
          format: int32
          description: The id of the list this item belongs to
        owner:
          type: integer
          format: int32
        updated_at:
          type: string
          format: date-time
    UserLoginRequest:
      type: object
      required:
      - password
      properties:
        email:
          type:
          - string
          - 'null'
        password:
          type: string
        username:
          type:
          - string
          - 'null'
    UserLoginResponse:
      type: object
      required:
      - token
      properties:
        token:
          type: string
    UserRegisterRequest:
      type: object
      required:
      - email
      - email_code
      - username
      - password
      properties:
        email:
          type: string
        email_code:
          type: string
        password:
          type: string
        username:
          type: string
    UserRegisterResponse:
      type: object
      required:
      - token
      properties:
        token:
          type: string
    UserTag:
      type: object
      required:
      - id
      - owner
      - title
      - children
      - created_at
      - updated_at
      properties:
        children:
          type: array
          items:
            $ref: '#/components/schemas/TagChild'
        created_at:
          type: string
          format: date-time
        id:
          type: integer
          format: int32
        owner:
          type: integer
          format: int32
        title:
          type: string
        updated_at:
          type: string
          format: date-time
  securitySchemes:
    Authorization Token:
      type: apiKey
      in: header
      name: Authorization
tags:
- name: feed
  description: Routes related to feed subscriptions and discovery
- name: index
  description: Routes related to feed indexes and aggregation
- name: items
  description: Routes related to feed items and content
- name: lists
  description: Routes related to user-created lists
- name: search
  description: Routes related to search functionality
- name: user
  description: Routes related to user management
- name: user:email
  description: Routes related to email authentication
- name: user:oauth
  description: Routes related to OAuth authentication
- name: user:history
  description: Routes related to user reading history
- name: tags
  description: Routes related to user tags management
